// Code generated by protoc-gen-go. DO NOT EDIT.
// source: source.proto

package source

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VideoInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Quality              string   `protobuf:"bytes,2,opt,name=quality,proto3" json:"quality,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoInfo) Reset()         { *m = VideoInfo{} }
func (m *VideoInfo) String() string { return proto.CompactTextString(m) }
func (*VideoInfo) ProtoMessage()    {}
func (*VideoInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9229c9b6eb8e6b85, []int{0}
}

func (m *VideoInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VideoInfo.Unmarshal(m, b)
}
func (m *VideoInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VideoInfo.Marshal(b, m, deterministic)
}
func (m *VideoInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoInfo.Merge(m, src)
}
func (m *VideoInfo) XXX_Size() int {
	return xxx_messageInfo_VideoInfo.Size(m)
}
func (m *VideoInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VideoInfo proto.InternalMessageInfo

func (m *VideoInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VideoInfo) GetQuality() string {
	if m != nil {
		return m.Quality
	}
	return ""
}

type Video struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Video) Reset()         { *m = Video{} }
func (m *Video) String() string { return proto.CompactTextString(m) }
func (*Video) ProtoMessage()    {}
func (*Video) Descriptor() ([]byte, []int) {
	return fileDescriptor_9229c9b6eb8e6b85, []int{1}
}

func (m *Video) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Video.Unmarshal(m, b)
}
func (m *Video) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Video.Marshal(b, m, deterministic)
}
func (m *Video) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Video.Merge(m, src)
}
func (m *Video) XXX_Size() int {
	return xxx_messageInfo_Video.Size(m)
}
func (m *Video) XXX_DiscardUnknown() {
	xxx_messageInfo_Video.DiscardUnknown(m)
}

var xxx_messageInfo_Video proto.InternalMessageInfo

func (m *Video) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*VideoInfo)(nil), "VideoInfo")
	proto.RegisterType((*Video)(nil), "Video")
}

func init() { proto.RegisterFile("source.proto", fileDescriptor_9229c9b6eb8e6b85) }

var fileDescriptor_9229c9b6eb8e6b85 = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xce, 0x2f, 0x2d,
	0x4a, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xb2, 0xe4, 0xe2, 0x0c, 0xcb, 0x4c, 0x49,
	0xcd, 0xf7, 0xcc, 0x4b, 0xcb, 0x17, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x24, 0xb8, 0xd8, 0x0b, 0x4b, 0x13, 0x73, 0x32, 0x4b,
	0x2a, 0x25, 0x98, 0xc0, 0xc2, 0x30, 0xae, 0x92, 0x34, 0x17, 0x2b, 0x58, 0x2b, 0x48, 0x5b, 0x4a,
	0x62, 0x49, 0x22, 0x58, 0x1b, 0x4f, 0x10, 0x98, 0x6d, 0xa4, 0xc3, 0xc5, 0x16, 0x0c, 0xb6, 0x47,
	0x48, 0x89, 0x8b, 0xc3, 0x3d, 0xb5, 0x04, 0xa2, 0x92, 0x4b, 0x0f, 0x6e, 0x99, 0x14, 0x1b, 0x84,
	0xad, 0xc4, 0x60, 0xc0, 0x98, 0xc4, 0x06, 0x76, 0x8c, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x87,
	0xe9, 0x4e, 0xf5, 0x9c, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SourceClient is the client API for Source service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SourceClient interface {
	GetVideo(ctx context.Context, in *VideoInfo, opts ...grpc.CallOption) (Source_GetVideoClient, error)
}

type sourceClient struct {
	cc *grpc.ClientConn
}

func NewSourceClient(cc *grpc.ClientConn) SourceClient {
	return &sourceClient{cc}
}

func (c *sourceClient) GetVideo(ctx context.Context, in *VideoInfo, opts ...grpc.CallOption) (Source_GetVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Source_serviceDesc.Streams[0], "/Source/GetVideo", opts...)
	if err != nil {
		return nil, err
	}
	x := &sourceGetVideoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Source_GetVideoClient interface {
	Recv() (*Video, error)
	grpc.ClientStream
}

type sourceGetVideoClient struct {
	grpc.ClientStream
}

func (x *sourceGetVideoClient) Recv() (*Video, error) {
	m := new(Video)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SourceServer is the server API for Source service.
type SourceServer interface {
	GetVideo(*VideoInfo, Source_GetVideoServer) error
}

// UnimplementedSourceServer can be embedded to have forward compatible implementations.
type UnimplementedSourceServer struct {
}

func (*UnimplementedSourceServer) GetVideo(req *VideoInfo, srv Source_GetVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVideo not implemented")
}

func RegisterSourceServer(s *grpc.Server, srv SourceServer) {
	s.RegisterService(&_Source_serviceDesc, srv)
}

func _Source_GetVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VideoInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SourceServer).GetVideo(m, &sourceGetVideoServer{stream})
}

type Source_GetVideoServer interface {
	Send(*Video) error
	grpc.ServerStream
}

type sourceGetVideoServer struct {
	grpc.ServerStream
}

func (x *sourceGetVideoServer) Send(m *Video) error {
	return x.ServerStream.SendMsg(m)
}

var _Source_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Source",
	HandlerType: (*SourceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVideo",
			Handler:       _Source_GetVideo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "source.proto",
}
